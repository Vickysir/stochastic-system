{"version":3,"sources":["logo.svg","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","App","useState","store","setStore","restaurant1","restaurant","setRestaurant","handleClick","res","number","i","length","console","log","restaurantNum","minNum","maxNum","random","parseInt","Math","randomNum","className","onChange","e","value","target","restaurant2","map","item","index","key","src","logo","alt","onClick","style","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"uGAAAA,EAAOC,QAAU,IAA0B,kC,sLC6D5BC,MAzDf,WAAgB,IAAD,EACYC,mBAAS,IADrB,mBACPC,EADO,KACAC,EADA,OAEsBF,mBAASG,GAF/B,mBAEPC,EAFO,KAEKC,EAFL,KAIRC,EAAc,SAACF,GACpB,IACIG,EAgEC,SAAuBH,EAAgBI,GAE7C,IAAK,IAAIC,EAAI,EAAGA,EAAIL,EAAWM,OAAQD,IACtC,GAAID,IAAWC,EAGd,OAFAE,QAAQC,IAAI,IAAKH,GACjBE,QAAQC,IAAI,SAAUJ,GACfJ,EAAWK,GAtEJI,CAAcT,EAwDxB,SAAmBU,EAAaC,GACtC,IAAIC,EAASC,SAASC,KAAKF,UAAYD,EAASD,EAAS,GAAKA,EAAQ,IAEtE,OADAH,QAAQC,IAAI,SAAUI,GACfA,EA5DOG,CAAU,EAAGf,EAAWM,OAAS,IAG9CR,EAASK,IAYV,OACC,yBAAKa,UAAU,OACd,4BAAQA,UAAU,cACjB,6BACC,8EAEC,4BAAQA,UAAU,cAAcC,SAhBZ,SAACC,GACzBpB,EAAS,IACT,IAAIqB,EAAQD,EAAEE,OAAOD,MAEpBlB,EADa,MAAVkB,EACWpB,EAEAsB,KAWV,4BAAQF,MAAM,KAAd,gBACA,4BAAQA,MAAM,KAAd,kBAGF,wBAAIH,UAAU,YAEZhB,EAAWsB,KAAI,SAACC,EAAMC,GACrB,OAAO,wBAAIC,IAAKD,GAAO,8BAAOD,SAQlC,yBAAKG,IAAKC,IAAMX,UAAU,WAAWY,IAAI,SACzC,6GAGA,uBAAGC,QAAS,kBAAM3B,EAAYF,IAAa8B,MAAO,CAAE,OAAU,UAAW,MAAS,YAAlF,kCAGA,uBAAGA,MAAO,CAAE,MAAS,YACnBjC,MAiCN,IAAIE,EAAc,CACjB,eACA,qBACA,iCACA,mDACA,qBACA,qBACA,2BACA,qBACA,2BACA,uCACA,uCACA,iCACA,2BACA,2BACA,uCACA,qBACA,6CACA,wCACA,sBAEGsB,EAAc,CACjB,yDACA,eACA,6CACA,uCACA,qBACA,iCACA,mDACA,eACA,eACA,eACA,6CACA,qBACA,eACA,eACA,iCACA,eACA,gBCjHmBU,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLzC,QAAQyC,MAAMA,EAAMC,c","file":"static/js/main.dc4d0883.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { useState } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nfunction App() {\n\tconst [store, setStore] = useState(\"\")\n\tconst [restaurant, setRestaurant] = useState(restaurant1)\n\n\tconst handleClick = (restaurant: any) => {\n\t\tlet number = randomNum(0, restaurant.length - 1);\n\t\tlet res: any = restaurantNum(restaurant, number);\n\t\t// alert(\"不许反悔奥！！！\")\n\t\tsetStore(res);\n\t}\n\tlet handelChangeSelect = (e: any) => {\n\t\tsetStore(\"\");\n\t\tlet value = e.target.value;\n\t\tif (value === \"1\") {\n\t\t\tsetRestaurant(restaurant1)\n\t\t} else {\n\t\t\tsetRestaurant(restaurant2)\n\t\t}\n\n\t}\n\treturn (\n\t\t<div className=\"App\">\n\t\t\t<header className=\"App-header\">\n\t\t\t\t<div>\n\t\t\t\t\t<p>\n\t\t\t\t\t\t今日份餐馆一览表\n\t\t\t\t\t\t<select className=\"area-select\" onChange={handelChangeSelect}>\n\t\t\t\t\t\t\t<option value=\"1\">上海</option>\n\t\t\t\t\t\t\t<option value=\"2\">杭州</option>\n\t\t\t\t\t\t</select>\n\t\t\t\t\t</p>\n\t\t\t\t\t<ul className=\"name-box\">\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\trestaurant.map((item, index) => {\n\t\t\t\t\t\t\t\treturn <li key={index}><span>{item}</span></li>\n\t\t\t\t\t\t\t})\n\t\t\t\t\t\t}\n\t\t\t\t\t\t{/* <li>\n              <span>添加</span>\n            </li> */}\n\t\t\t\t\t</ul>\n\t\t\t\t</div>\n\t\t\t\t<img src={logo} className=\"App-logo\" alt=\"logo\" />\n\t\t\t\t<p>\n\t\t\t\t\t那么问题来了，世纪大难题之\n        </p>\n\t\t\t\t<p onClick={() => handleClick(restaurant)} style={{ \"cursor\": \"pointer\", \"color\": \"#FFAF5D\" }}>\n\t\t\t\t\t今天吃什么 \n        </p>\n\t\t\t\t<p style={{ \"color\": \"#61dafb\" }}>\n\t\t\t\t\t{store}\n\t\t\t\t</p>\n\t\t\t</header>\n\t\t</div>\n\t);\n}\n\nexport default App;\n\n\n\n\nexport function randomNum(minNum: any, maxNum: any) {\n\tlet random = parseInt(Math.random() * (maxNum - minNum + 1) + minNum, 10);\n\tconsole.log('random', random)\n\treturn random\n\n}\n\n\nexport function restaurantNum(restaurant: [], number: number) {\n\n\tfor (let i = 0; i < restaurant.length; i++) {\n\t\tif (number === i) {\n\t\t\tconsole.log('i', i)\n\t\t\tconsole.log('number', number)\n\t\t\treturn restaurant[i]\n\t\t}\n\t}\n\n\n}\n\nlet restaurant1 = [\n\t\"菜饭\",\n\t\"本帮面\",\n\t\"张亮麻辣烫\",\n\t\"小淮娘老鸭粉丝汤\",\n\t\"陕老顺\",\n\t\"小圆堂\",\n\t\"初未日料\",\n\t\"汉堡王\",\n\t\"谷田稻香\",\n\t\"上海富春小笼\",\n\t\"鱼你说酸菜鱼\",\n\t\"桂府手工粉\",\n\t\"香叶餐厅\",\n\t\"海南鸡饭\",\n\t\"杨国福麻辣烫\",\n\t\"金拱门\",\n\t\"再给你一次机会\",\n\t\"壮家 米粉印象\",\n\t\"黄焖鸡\"\n]\nlet restaurant2 = [\n\t\"可鱼可饭无刺酸菜鱼\",\n\t\"湘遇\",\n\t\"小魔椒麻辣香锅\",\n\t\"无名肉沫米粉\",\n\t\"麻辣烫\",\n\t\"黄焖鸡米饭\",\n\t\"牛家人大碗牛肉面\",\n\t\"蹭饭\",\n\t\"意面\",\n\t\"披萨\",\n\t\"再给你一次机会\",\n\t\"别吃了\",\n\t\"汉堡\",\n\t\"炸鸡\",\n\t\"淮南牛肉汤\",\n\t\"冒菜\",\n\t\"日料\"\n]\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}