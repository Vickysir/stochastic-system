{"version":3,"sources":["logo.svg","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","App","useState","store","setStore","className","restaurant","map","item","index","key","src","logo","alt","onClick","res","number","i","length","console","log","restaurantNum","minNum","maxNum","random","parseInt","Math","randomNum","alert","style","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"sGAAAA,EAAOC,QAAU,IAA0B,kC,uLC4C5BC,MAxCf,WAAgB,IAAD,EACYC,mBAAS,IADrB,mBACNC,EADM,KACAC,EADA,KASb,OACE,yBAAKC,UAAU,OACb,4BAAQA,UAAU,cAChB,6BACE,+EACA,wBAAIA,UAAU,YAEVC,EAAWC,KAAI,SAACC,EAAKC,GACnB,OAAO,wBAAIC,IAAKD,GAAO,8BAAOD,SAQtC,yBAAKG,IAAKC,IAAMP,UAAU,WAAWQ,IAAI,SACzC,6GAGA,uBAAGC,QA3BW,WAClB,IACIC,EAiDD,SAAwBC,GAE7B,IAAK,IAAIC,EAAE,EAAEA,EAAEX,EAAWY,OAAOD,IAC/B,GAAGD,IAAWC,EAGZ,OAFAE,QAAQC,IAAI,IAAKH,GACjBE,QAAQC,IAAI,SAAUJ,GACfV,EAAWW,GAvDLI,CAyCZ,SAAmBC,EAAYC,GACpC,IAAIC,EAASC,SAASC,KAAKF,UAAUD,EAAOD,EAAO,GAAGA,EAAO,IAE7D,OADAH,QAAQC,IAAI,SAAUI,GACfA,EA7CQG,CAAU,EAAErB,EAAWY,OAAO,IAE3CU,MAAM,oDACNxB,EAASW,IAuBoBc,MAAO,CAAC,OAAS,UAAU,MAAQ,YAA5D,kCAGA,uBAAGA,MAAO,CAAC,MAAQ,YAChB1B,MAiCX,IAAIG,EAAa,CACf,eACA,qBACA,iCACA,mDACA,qBACA,qBACA,2BACA,qBACA,2BACA,uCACA,uCACA,iCACA,2BACA,2BACA,uCACA,qBACA,6CACA,wCACA,sBC7EkBwB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL5B,QAAQ4B,MAAMA,EAAMC,c","file":"static/js/main.a79e2a60.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React ,{useState}from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nfunction App() {\n  const [store,setStore] = useState(\"\")\n  const handleClick = ()=>{\n    let number = randomNum(0,restaurant.length-1);\n    let res: any = restaurantNum(number);\n    alert(\"不许反悔奥！！！\")\n    setStore(res);\n  }\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <div>\n          <p>今日份餐馆一览表</p>\n          <ul className=\"name-box\">\n            {\n              restaurant.map((item,index)=>{\n                return <li key={index}><span>{item}</span></li>\n              })\n            }\n            {/* <li>\n              <span>添加</span>\n            </li> */}\n          </ul>\n        </div>\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          那么问题来了，世纪大难题之\n        </p>\n        <p onClick={handleClick} style={{\"cursor\":\"pointer\",\"color\":\"#FFAF5D\"}}>\n          今天吃什么\n        </p>\n        <p style={{\"color\":\"#61dafb\"}}>\n          {store}\n        </p>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n\n\n\n\nexport function randomNum(minNum: any,maxNum: any){ \n  let random = parseInt(Math.random()*(maxNum-minNum+1)+minNum,10); \n  console.log('random', random)\n  return random\n  \n} \n\n\nexport function restaurantNum (number: number){\n\n  for (let i=0;i<restaurant.length;i++){\n    if(number === i){\n      console.log('i', i)\n      console.log('number', number)\n      return restaurant[i]\n    }\n  }\n  \n  \n}\n\nlet restaurant = [\n  \"菜饭\",\n  \"本帮面\",\n  \"张亮麻辣烫\",\n  \"小淮娘老鸭粉丝汤\",\n  \"陕老顺\",\n  \"小圆堂\",\n  \"初未日料\",\n  \"汉堡王\",\n  \"谷田稻香\",\n  \"上海富春小笼\",\n  \"鱼你说酸菜鱼\",\n  \"桂府手工粉\",\n  \"香叶餐厅\",\n  \"海南鸡饭\",\n  \"杨国福麻辣烫\",\n  \"金拱门\",\n  \"再给你一次机会\",\n  \"壮家 米粉印象\",\n  \"黄焖鸡\"\n]\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}